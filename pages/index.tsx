import {
  useClient,
  useViewerConnection,
  useViewerRecord,
} from "@self.id/framework";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useContext, useEffect } from "react";
import styles from "../styles/Home.module.css";
import { ConnectButton } from "../components/connect";
import { ModelManager } from "@glazed/devtools";
import { CeramicClient } from "@ceramicnetwork/http-client";
import React from "react";
import { Core } from "@self.id/core";

import {
  Timeline,
  Input,
  Form,
  Button,
  message,
  PageHeader,
  Typography,
  Empty,
} from "antd";
import moment from "moment";
const { Title, Paragraph, Text, Link } = Typography;
const Home: NextPage = () => {
  const [connection, connect, disconnect] = useViewerConnection();
  const [title, setTitle] = React.useState("Hello World");
  const [content, setContent] = React.useState("This is a test");
  const [notes, setNotes] = React.useState<any>([]);
  //@ts-ignore
  const client = useClient();

  async function getNotes() {
    const loading = message.loading("Loading notes...", 0);
    try {
      const noteIds: any = await client.dataStore.getRecord(
        //@ts-ignore
        client.dataModel.aliases.definitions.myNotes
      );
      console.log(noteIds);
      const streamMap = await client.ceramic.multiQuery(
        noteIds.records.map((r: any) => {
          return {
            streamId: r,
          };
        })
      );
      console.log("streamMap", streamMap);
      const _notes = [];
      for (const key in streamMap) {
        _notes.push(streamMap[key]);
      }
      setNotes(_notes);
    } catch (e) {
      console.log(e);
    }
    loading();
  }
  useEffect(() => {
    if (connection.status == "connected") getNotes();
  }, [connection.status]);
  async function createNote() {
    const loading = message.loading("submit note in progress..", 0);
    //@ts-ignore
    const stream = await client.dataModel.createTile("Note3", {
      title: title,
      content: content,
      create_at: moment().format("YYYY-MM-DD HH:mm:ss"),
    });
    setTitle("");
    setContent("");
    loading();
    const loading2 = message.loading("save notes in progress..", 0);
    const id = stream.id.toUrl();
    const noteIds = notes.map((_note: any) => {
      return _note.id.toUrl();
    });

    noteIds.push(id);
    console.log("_notes", noteIds);

    await client.dataStore.setRecord(
      //@ts-ignore
      client.dataModel.aliases.definitions.myNotes,
      {
        records: noteIds,
      }
    );
    loading2();
    getNotes();
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Note</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <PageHeader
          className="site-page-header"
          title="My onChain Note"
          subTitle="Powered by Self.ID"
          extra={<ConnectButton />}
        />
        <div style={{ padding: "40px" }}>
          <Title level={4}>Notes</Title>
          <div>
            {notes.length == 0 ? (
              <Empty />
            ) : (
              <Timeline>
                {notes.map((note: any, i: number) => {
                  return (
                    <Timeline.Item key={i}>
                      <div>
                        {note.content.title}{" "}
                        {` ${
                          note.content.create_at
                            ? moment(note.content.create_at).fromNow()
                            : ""
                        }`}
                      </div>
                      <div> {note.content.content}</div>
                    </Timeline.Item>
                  );
                })}
              </Timeline>
            )}
          </div>
          <Title level={4} style={{ marginTop: "40px" }}>
            Add New Note
          </Title>
          <div>
            <Form layout="vertical">
              <Form.Item
                name="title"
                label="Title"
                rules={[{ required: true }]}
              >
                <Input
                  onChange={(e) => {
                    setTitle(e.target.value);
                  }}
                />
              </Form.Item>
              <Form.Item name="note" label="Note" rules={[{ required: true }]}>
                <Input.TextArea
                  rows={5}
                  onChange={(e) => {
                    setContent(e.target.value);
                  }}
                />
              </Form.Item>
              <Form.Item>
                <Button
                  onClick={createNote}
                  disabled={connection.status != "connected"}
                >
                  Submit
                </Button>
              </Form.Item>
            </Form>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;
